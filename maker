#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;
use Illuminate\Console\GeneratorCommand;
use Illuminate\Console\OutputStyle;
use Illuminate\Console\Parser;
use Illuminate\Filesystem\Filesystem;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

use function Illuminate\Filesystem\join_paths;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

class MakeCommandDecorator extends GeneratorCommand
{

    /**
     * Create a new controller creator command instance.
     *
     * @param  \Illuminate\Filesystem\Filesystem  $files
     * @return void
     */
    public function __construct(protected GeneratorCommand $generator)
    {
        $this->name = $generator->getName();
        $this->description = $generator->getDescription();
        $this->input = $this->generator->input;

        parent::__construct(app(Filesystem::class));
    }

    public function run(InputInterface $input, OutputInterface $output): int
    {
        $this->generator->setOutput($output);

        $this->generator->setInput($input);

        return parent::run($input, $output);
    }

    public function getPath($name)
    {

        return $this->generator->getPath($name);
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return $this->generator->getStub();
    }

    protected function getOptions() : array
    {
        return array_merge(
            $this->generator->getOptions(),
            [['stub', null, InputOption::VALUE_OPTIONAL, 'The stub file to use']],
            [['preset', null, InputOption::VALUE_OPTIONAL, 'The preset']],
        );
    }

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    #[\Override]
    protected function buildClass($name)
    {
        $stub = $this->files->get($this->getStubOption() ?? $this->getStub());

        return $this->replaceNamespace($stub, $name)->replaceClass($stub, $name);
    }

    /**
     * Get a stub file for the generator from a stub option.
     *
     * @return string|null
     */
    protected function getStubOption()
    {
        if (! $this->hasOption('stub') || ! $this->option('stub')) {
            return null;
        }

        $stub = str_replace(['\\', '/'], DIRECTORY_SEPARATOR, trim($this->option('stub')));

        // get the path the command was run from
        $relativeRoot = $_SERVER['LARAVEL_BASE_PATH'] ?? getcwd();

        return match (true) {
            file_exists($namedStub = $this->laravel->basePath(join_paths('stubs', $stub.'.stub'))) => $namedStub,
            file_exists($localStub = $this->laravel->basePath($stub.'.stub')) => $localStub,
            file_exists($relativeStub = join_paths($relativeRoot, $stub)) => $relativeStub,
            file_exists($stubPath = $stub) => $stubPath,
            default => throw new \InvalidArgumentException("Stub file not found: {$stub}"),
        };
    }

    public function __call($method, $parameters)
    {
        return $this->generator->{$method}(...$parameters);
    }
}

class Kernel extends \Illuminate\Foundation\Console\Kernel
{
    /**
     * Run the console application.
     *
     * @param  \Symfony\Component\Console\Input\InputInterface  $input
     * @param  \Symfony\Component\Console\Output\OutputInterface|null  $output
     * @return int
     */
    public function handle($input, $output = null)
    {

        $getName = function ($input) {
            return (string) str()->of(explode(' ', (string) $input)[0])->unwrap('\'');
        };

        $command = collect($this->all())->filter(fn ($command) => $command instanceof GeneratorCommand)
            ->first(fn ($command) => $command->getName() === $getName($input));
        
        if (! $command) {
            return parent::handle($input, $output);
        }

        $input = str()->of($input)->replace([$command->getName(), '\'', '"'], '')->trim()->toString();

        $args = Parser::parse($input);

        $options = str_replace($args[0], '', $input);

        $args = array_values(array_filter($args));

        $argsAndOptions = array_merge([$command->getName(),$command->getName()],$args, explode(' ', $options));

        $input = new ArgvInput(array_filter($argsAndOptions));

        $output = new OutputStyle($input, $output);

        $decorator = (new MakeCommandDecorator($command));
        $this->registerCommand($decorator);
        $decorator->setLaravel($this->app);
        return $decorator->run($input, $output);
    }
}

$app->singleton(
    \Illuminate\Contracts\Console\Kernel::class,
    Kernel::class,
);

$status = $app->handleCommand(new ArgvInput);

exit($status);
